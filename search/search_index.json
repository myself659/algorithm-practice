{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"content \u6570\u636e\u7ed3\u6784 array list \u7b97\u6cd5 \u6392\u5e8f","title":"Home"},{"location":"#content","text":"","title":"content"},{"location":"#_1","text":"array list","title":"\u6570\u636e\u7ed3\u6784"},{"location":"#_2","text":"","title":"\u7b97\u6cd5"},{"location":"#_3","text":"","title":"\u6392\u5e8f"},{"location":"about/","text":"about doc Build by mkdocs, the theme is readthedocs. about author Please visit my blog !","title":"About"},{"location":"about/#about-doc","text":"Build by mkdocs, the theme is readthedocs.","title":"about doc"},{"location":"about/#about-author","text":"Please visit my blog !","title":"about author"},{"location":"array/","text":"\u6570\u7ec4array \u6570\u7ec4\u662f\u4e00\u79cd\u5bb9\u5668\uff0c\u5176\u7279\u5f81\u5982\u4e0b\uff1a \u7279\u5f81 \u6709\u8fb9\u754c\uff0c\u6570\u7ec4\u6709\u4e00\u4e2a\u957f\u5ea6\u9650\u5236 \u6570\u7ec4\u6210\u5458\u7c7b\u578b\u662f\u76f8\u540c\u7684(c/cpp, golang, rust) \u5730\u5740\u8fde\u7eed\uff0cindex\u8fde\u7eed \u5c5e\u4e8e\u4e00\u79cdkey-value\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6570\u7ec4\u7684index\u76f8\u5f53\u4e8ekey\uff0c\u5bf9\u5e94\u5143\u7d20\u4e3avalue\uff0c\u6570\u7ec4\u53ef\u4ee5\u770b\u4f5c\u4e3a\u4e00\u79cd\u6ca1\u6709hash\u51b2\u7a81\u7684hash\u8868,\u53ef\u4ee5\u5c06\u6570\u7ec4\u770b\u6210\u4e00\u79cd\u7279\u6b8a\u7684map cache\u53cb\u597d \u4e0d\u5229\u4e8e\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u548c\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 \u6570\u7ec4\u6269\u5bb9\u65b9\u9762\u4e0d\u652f\u6301\u52a8\u6001\u6269\u5bb9 \u5341\u5206\u7075\u6d3b\u7684\u5143\u7d20\u8bbf\u95ee\u65b9\u5f0f\uff0c\u652f\u6301\u6839\u636eindex\u8bbf\u95ee\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u50cf\u94fe\u8868\u5fc5\u987b\u4ece\u5934\u5f00\u59cb\uff0c\u6216\u8005\u8981\u83b7\u53d6\u5230\u8282\u70b9\u7684\u5730\u5740 \u5206\u7c7b \u957f\u5ea6\u662f\u5426\u56fa\u5b9a \u9759\u6001\u6570\u7ec4 \u52a8\u6001\u6570\u7ec4 \u64cd\u4f5c \u521b\u5efa\u6570\u7ec4 \u904d\u5386 \u57fa\u672c\u65b9\u5f0f\uff1a \u6b63\u5411\u904d\u5386 \u53cd\u5411\u904d\u5386 \u53cc\u5411\u904d\u5386\uff08\u53cc\u6307\u9488\uff09 \u6570\u7ec4\u7684\u7279\u5f81 \u91cd\u590d\u5143\u7d20 \u4e00\u4e2a\u957f\u5ea6\u4e3an+1\u7684\u6570\u7ec4\uff0c\u5305\u542b\u7684\u6570\u662f1\u5230n\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u6570\u81f3\u5c11\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u8bf7\u627e\u5230\u5b83\u3002 \u4f8b\u5982\uff0c \u8f93\u5165\uff1a[3,2,4,2,1] \u8f93\u51fa\uff1a2 \u7f3a\u5c11\u5143\u7d20 How To: Solving the \u2018Missing Number\u2019 Question 1\u5230n\u5c11\u4e86\u5176\u4e2d\u4e00\u4e2a\u6570\u636e\uff0c\u627e\u51fa\u7f3a\u5931\u7684\u8fd9\u4e2a\u6570\u636e\u3002 \u5f02\u6216\u7684\u8bed\u53e5\u3002 \u591a\u6570\u5143\u7d20 \u591a\u6570\u5143\u7d20\u662f\u6307\u4e00\u4e2a\u5143\u7d20\u5728\u4e2a\u6570\u8d85\u8fc7\u4e86\u4e00\u534a\u3002 https://medium.com/swlh/finding-the-majority-element-is-your-solution-efficient-enough-2a6b49a75cb8 \u7b2c\u4e00\u6b65\uff1a\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20 \u7b2c\u4e8c\u6b65\uff1a \u5224\u65ad\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u8d85\u8fc7\u4e86\u534a\u6570 \u6570\u7ec4\u4e58\u79ef Solve the problem before coding it up 238. Product of Array Except Self \u601d\u8def\uff1a \u4ee5\u6b64\u4e3a\u4f8b Input: [1,2,3,4] Output: [24,12,8,6] \u6b63\u5e8f\uff1a increaseArray = [1, 1, 2, 6] increaseArray[0] = 1 increaseArray[1] = increaseArray[0]*data[1-0] = \u53cd\u5e8f\uff1a [24,12,4, 1] decreaseArray[3] = 1 decreaseArray[2] = decreaseArray[3]*data[3-i] \u4e24\u8005\u76f8\u4e58\uff1a [24,12,8, 6] \u5b50\u6570\u7ec4 Maximum Subarray Maximum Sum of Two Non-Overlapping Subarrays \u6570\u7ec4\u5408\u5e76 How to Merge K Sorted Arrays \u6570\u7ec4\u5e76\u4e0d\u662f\u6570\u7ec4 \u7528\u6570\u7ec4\u8868\u793a\u5806\u3002 \u5b57\u7b26\u4e32\u4e5f\u662f\u4e00\u79cd\u6570\u7ec4 \u5149\u7528\u6570\u7ec4\u5e76\u4e0d\u80fd\u89e3\u51b3\u6240\u6709\u7684\u95ee\u9898 \u89e3\u51b3\u95ee\u9898\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u7684\u6570\u636e\u7ed3\u6784 slide windows \u9898\u76ee\u7c7b\u578b\u5206\u4e3a\u4e24\u79cd\uff1a \u56fa\u5b9a\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5982\u627e\u5230\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c \u4e0d\u56fa\u5b9a\u957f\u5ea6\uff0c\u5982\u627e\u5230\u5b50\u6570\u7ec4\u4e4b\u548c\u7b49\u4e8e\u6307\u5b9a\u7684\u6570\u503c 239. Sliding Window Maximum leetcode-295 Find Median from Data Stream 480. Sliding Window Median leetcode Binary Search \u2014 Find K-th Smallest Pair Distance Divide and Conquer Paradigm in Algorithms. Two Sum","title":"\u6570\u7ec4array"},{"location":"array/#array","text":"\u6570\u7ec4\u662f\u4e00\u79cd\u5bb9\u5668\uff0c\u5176\u7279\u5f81\u5982\u4e0b\uff1a","title":"\u6570\u7ec4array"},{"location":"array/#_1","text":"\u6709\u8fb9\u754c\uff0c\u6570\u7ec4\u6709\u4e00\u4e2a\u957f\u5ea6\u9650\u5236 \u6570\u7ec4\u6210\u5458\u7c7b\u578b\u662f\u76f8\u540c\u7684(c/cpp, golang, rust) \u5730\u5740\u8fde\u7eed\uff0cindex\u8fde\u7eed \u5c5e\u4e8e\u4e00\u79cdkey-value\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6570\u7ec4\u7684index\u76f8\u5f53\u4e8ekey\uff0c\u5bf9\u5e94\u5143\u7d20\u4e3avalue\uff0c\u6570\u7ec4\u53ef\u4ee5\u770b\u4f5c\u4e3a\u4e00\u79cd\u6ca1\u6709hash\u51b2\u7a81\u7684hash\u8868,\u53ef\u4ee5\u5c06\u6570\u7ec4\u770b\u6210\u4e00\u79cd\u7279\u6b8a\u7684map cache\u53cb\u597d \u4e0d\u5229\u4e8e\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u548c\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 \u6570\u7ec4\u6269\u5bb9\u65b9\u9762\u4e0d\u652f\u6301\u52a8\u6001\u6269\u5bb9 \u5341\u5206\u7075\u6d3b\u7684\u5143\u7d20\u8bbf\u95ee\u65b9\u5f0f\uff0c\u652f\u6301\u6839\u636eindex\u8bbf\u95ee\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u50cf\u94fe\u8868\u5fc5\u987b\u4ece\u5934\u5f00\u59cb\uff0c\u6216\u8005\u8981\u83b7\u53d6\u5230\u8282\u70b9\u7684\u5730\u5740","title":"\u7279\u5f81"},{"location":"array/#_2","text":"","title":"\u5206\u7c7b"},{"location":"array/#_3","text":"\u9759\u6001\u6570\u7ec4 \u52a8\u6001\u6570\u7ec4","title":"\u957f\u5ea6\u662f\u5426\u56fa\u5b9a"},{"location":"array/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"array/#_5","text":"","title":"\u521b\u5efa\u6570\u7ec4"},{"location":"array/#_6","text":"\u57fa\u672c\u65b9\u5f0f\uff1a \u6b63\u5411\u904d\u5386 \u53cd\u5411\u904d\u5386 \u53cc\u5411\u904d\u5386\uff08\u53cc\u6307\u9488\uff09","title":"\u904d\u5386"},{"location":"array/#_7","text":"","title":"\u6570\u7ec4\u7684\u7279\u5f81"},{"location":"array/#_8","text":"\u4e00\u4e2a\u957f\u5ea6\u4e3an+1\u7684\u6570\u7ec4\uff0c\u5305\u542b\u7684\u6570\u662f1\u5230n\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u6570\u81f3\u5c11\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u8bf7\u627e\u5230\u5b83\u3002 \u4f8b\u5982\uff0c \u8f93\u5165\uff1a[3,2,4,2,1] \u8f93\u51fa\uff1a2","title":"\u91cd\u590d\u5143\u7d20"},{"location":"array/#_9","text":"How To: Solving the \u2018Missing Number\u2019 Question 1\u5230n\u5c11\u4e86\u5176\u4e2d\u4e00\u4e2a\u6570\u636e\uff0c\u627e\u51fa\u7f3a\u5931\u7684\u8fd9\u4e2a\u6570\u636e\u3002 \u5f02\u6216\u7684\u8bed\u53e5\u3002","title":"\u7f3a\u5c11\u5143\u7d20"},{"location":"array/#_10","text":"\u591a\u6570\u5143\u7d20\u662f\u6307\u4e00\u4e2a\u5143\u7d20\u5728\u4e2a\u6570\u8d85\u8fc7\u4e86\u4e00\u534a\u3002 https://medium.com/swlh/finding-the-majority-element-is-your-solution-efficient-enough-2a6b49a75cb8 \u7b2c\u4e00\u6b65\uff1a\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20 \u7b2c\u4e8c\u6b65\uff1a \u5224\u65ad\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u8d85\u8fc7\u4e86\u534a\u6570","title":"\u591a\u6570\u5143\u7d20"},{"location":"array/#_11","text":"Solve the problem before coding it up 238. Product of Array Except Self \u601d\u8def\uff1a \u4ee5\u6b64\u4e3a\u4f8b Input: [1,2,3,4] Output: [24,12,8,6] \u6b63\u5e8f\uff1a increaseArray = [1, 1, 2, 6] increaseArray[0] = 1 increaseArray[1] = increaseArray[0]*data[1-0] = \u53cd\u5e8f\uff1a [24,12,4, 1] decreaseArray[3] = 1 decreaseArray[2] = decreaseArray[3]*data[3-i] \u4e24\u8005\u76f8\u4e58\uff1a [24,12,8, 6]","title":"\u6570\u7ec4\u4e58\u79ef"},{"location":"array/#_12","text":"Maximum Subarray Maximum Sum of Two Non-Overlapping Subarrays","title":"\u5b50\u6570\u7ec4"},{"location":"array/#_13","text":"How to Merge K Sorted Arrays","title":"\u6570\u7ec4\u5408\u5e76"},{"location":"array/#_14","text":"\u7528\u6570\u7ec4\u8868\u793a\u5806\u3002","title":"\u6570\u7ec4\u5e76\u4e0d\u662f\u6570\u7ec4"},{"location":"array/#_15","text":"","title":"\u5b57\u7b26\u4e32\u4e5f\u662f\u4e00\u79cd\u6570\u7ec4"},{"location":"array/#_16","text":"\u89e3\u51b3\u95ee\u9898\u9700\u8981\u7ed3\u5408\u5176\u4ed6\u7684\u6570\u636e\u7ed3\u6784","title":"\u5149\u7528\u6570\u7ec4\u5e76\u4e0d\u80fd\u89e3\u51b3\u6240\u6709\u7684\u95ee\u9898"},{"location":"array/#slide-windows","text":"\u9898\u76ee\u7c7b\u578b\u5206\u4e3a\u4e24\u79cd\uff1a \u56fa\u5b9a\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5982\u627e\u5230\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c \u4e0d\u56fa\u5b9a\u957f\u5ea6\uff0c\u5982\u627e\u5230\u5b50\u6570\u7ec4\u4e4b\u548c\u7b49\u4e8e\u6307\u5b9a\u7684\u6570\u503c 239. Sliding Window Maximum leetcode-295 Find Median from Data Stream 480. Sliding Window Median","title":"slide windows"},{"location":"array/#leetcode","text":"Binary Search \u2014 Find K-th Smallest Pair Distance Divide and Conquer Paradigm in Algorithms. Two Sum","title":"leetcode"},{"location":"contacts/","text":"Please visit my blog for further infomation!","title":"Contacts"},{"location":"dp/","text":"leetcode House Robber House Robber House Robber II House Robber III LCS Longest Common String Dynamic Programming: Longest Common Subsequence Visually Explained knight dail stock Dynamic Programming Interview Questions: How to Maximize Stock Profits Dynamic Programming Interview Questions: Maximum Profit in Job Scheduling Distance and path Dynamic Programming Interview Questions: Levenshtein Distance Matrix Chain Multiplication Template for solving Matrix Chain Multiplication (MCM) problem in DP \u53c2\u8003 A Practical Introduction to Dynamic Programming for People Who Hate Dynamic Programming Understanding Dynamic Programming in theory and practice \u5982\u4f55\u7cfb\u7edf\u5730\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\uff1f `","title":"leetcode"},{"location":"dp/#leetcode","text":"","title":"leetcode"},{"location":"dp/#house-robber","text":"House Robber House Robber II House Robber III","title":"House Robber"},{"location":"dp/#lcs","text":"Longest Common String Dynamic Programming: Longest Common Subsequence Visually Explained","title":"LCS"},{"location":"dp/#knight-dail","text":"","title":"knight dail"},{"location":"dp/#stock","text":"Dynamic Programming Interview Questions: How to Maximize Stock Profits Dynamic Programming Interview Questions: Maximum Profit in Job Scheduling","title":"stock"},{"location":"dp/#distance-and-path","text":"Dynamic Programming Interview Questions: Levenshtein Distance","title":"Distance and path"},{"location":"dp/#matrix-chain-multiplication","text":"Template for solving Matrix Chain Multiplication (MCM) problem in DP","title":"Matrix Chain Multiplication"},{"location":"dp/#_1","text":"A Practical Introduction to Dynamic Programming for People Who Hate Dynamic Programming Understanding Dynamic Programming in theory and practice \u5982\u4f55\u7cfb\u7edf\u5730\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\uff1f `","title":"\u53c2\u8003"},{"location":"list/","text":"\u6307\u9488 \u8c08\u94fe\u8868\u8981\u4ece\u6307\u9488\u8bf4\u8d77\u3002 indrect\u601d\u60f3\u3002 \u4f18\u70b9 \u4fbf\u4e8e\u63d2\u5165\u4e0e\u5220\u9664 \u957f\u5ea6\u7a7a\u95f4\u7075\u6d3b \u7f3a\u70b9 \u4e0d\u652f\u6301index\u8bbf\u95ee\u5143\u7d20\uff0c\u8bbf\u95ee\u5143\u7d20\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u5185\u5b58\u4e0d\u8fde\u7eed \u76f8\u6bd4\u8f83\u4e8e\u6570\u7ec4\uff0c\u5360\u7528\u66f4\u591a\u7684\u5b58\u50a8\u7a7a\u95f4 \u5206\u7c7b \u5355\u5411\u94fe\u8868 \u53cc\u5411\u94fe\u8868 \u8ba1\u7b97list\u957f\u5ea6 \u76f4\u63a5\u6839\u636e\u94fe\u8868\u5934\u904d\u5386\u5230\u5c3e\u3002 \u68c0\u67e5\u94fe\u8868\u662f\u5426\u5b58\u5728\u73af \u5feb\u6162\u6307\u9488\u3002 \u67e5\u627e\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9 \u5feb\u6162\u6307\u9488\u3002","title":"\u6307\u9488"},{"location":"list/#_1","text":"\u8c08\u94fe\u8868\u8981\u4ece\u6307\u9488\u8bf4\u8d77\u3002 indrect\u601d\u60f3\u3002","title":"\u6307\u9488"},{"location":"list/#_2","text":"\u4fbf\u4e8e\u63d2\u5165\u4e0e\u5220\u9664 \u957f\u5ea6\u7a7a\u95f4\u7075\u6d3b","title":"\u4f18\u70b9"},{"location":"list/#_3","text":"\u4e0d\u652f\u6301index\u8bbf\u95ee\u5143\u7d20\uff0c\u8bbf\u95ee\u5143\u7d20\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) \u5185\u5b58\u4e0d\u8fde\u7eed \u76f8\u6bd4\u8f83\u4e8e\u6570\u7ec4\uff0c\u5360\u7528\u66f4\u591a\u7684\u5b58\u50a8\u7a7a\u95f4","title":"\u7f3a\u70b9"},{"location":"list/#_4","text":"\u5355\u5411\u94fe\u8868 \u53cc\u5411\u94fe\u8868","title":"\u5206\u7c7b"},{"location":"list/#list","text":"\u76f4\u63a5\u6839\u636e\u94fe\u8868\u5934\u904d\u5386\u5230\u5c3e\u3002","title":"\u8ba1\u7b97list\u957f\u5ea6"},{"location":"list/#_5","text":"\u5feb\u6162\u6307\u9488\u3002","title":"\u68c0\u67e5\u94fe\u8868\u662f\u5426\u5b58\u5728\u73af"},{"location":"list/#_6","text":"\u5feb\u6162\u6307\u9488\u3002","title":"\u67e5\u627e\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9"},{"location":"recursion/","text":"recursion \u9012\u5f52\u662f\u4e00\u79cdtop-down\u7684\u601d\u7ef4\u65b9\u5f0f\u3002 A recursive function is a function that calls itself until a \u201cbase condition\u201d is true, and execution stops. \u9012\u5f52\u4f53\u73b0\u4e86\u4ee3\u7801\u7684\u5229\u7528\u3002 A function calling itself. \u6ce8\u610f \u5206\u89e3\u4e0e\u7ec4\u5408\u8981\u6b63\u786e \u6b7b\u5faa\u73af \u4e00\u5b9a\u8981\u627e\u5230\u6b63\u786e\u7684\u7ed3\u675f\u6761\u4ef6\u3002 stack overflow \u9012\u5f52\u7684\u5b9e\u73b0\u79bb\u4e0d\u5f00\u5806\u6808\u3002 vs iteration \u4ee5\u6811\u7684\u4e09\u79cd\u904d\u5386\u7531\u9012\u5f52\u8f6c\u6210\u8fed\u4ee3\u7684\u5b9e\u73b0\u3002 steps \u4ee5\u5e38\u89c1\u7684fib\u95ee\u9898\u4e3a\u4f8b\u3002 function fib(n) { } step-1 \u7406\u89e3\u95ee\u9898\u5b9a\u4e49\u95ee\u9898\u51fd\u6570 int fib(int n) { } \u4e5f\u5c31\u662f\u4e09\u4e2a\u95ee\u9898\uff1a \u51fd\u6570\u540d \u51fd\u6570\u5165\u53c2 \u51fd\u6570\u8fd4\u56de\u503c step-2 \u627e\u5230\u5b50\u95ee\u9898 \uff08\u5206\u89e3\u6210\u5b50\u95ee\u9898\uff09 \u91cd\u8981\u516c\u5f0f\uff1a fib(n) = fib(n-1) + fib(n -2) \u9898\u4e2d\u662f\u5c06fib(n)\u5206\u4e3a\u4e24\u4e2a\u4e24\u4e2a\u95ee\u9898\uff1afib(n-1)\uff0cfib(n -2) int fib(int n) { int prefib = fib(n-1); int preprefib = fib(n-2); } step-3 \u5e94\u7528\u5b50\u95ee\u9898 \uff08\u7ec4\u5408\u5b50\u95ee\u9898\uff09 int fib(int n) { int prefib = fib(n-1); int preprefib = fib(n-2); return preprefib+ prefib; } \u5c06\u4e24\u4e2a\u5b50\u95ee\u9898\u7ec4\u5408\u8d77\u6765\u3002 step-4 \u9012\u5f52\u7ed3\u675f\u7684\u6761\u4ef6\u53ca\u6700\u57fa\u672c\u7684\u5b50\u95ee\u9898 int fib(int n) { if(0 == n) return 1; if(1 == n) return 1; int prefib = fib(n-1); int preprefib = fib(n-2); return preprefib+ prefib; } step-5 \u6574\u4e2a\u8fc7\u7a0b\u7684\u53ef\u89c6\u5316\uff0c\u52a0\u5f3a\u7406\u89e3 \u8c03\u7528\u4e0e\u8fd4\u56de\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002 call(3) call(2) call(1) return (1) return (1+2) return(1+2+3)","title":"recursion"},{"location":"recursion/#recursion","text":"\u9012\u5f52\u662f\u4e00\u79cdtop-down\u7684\u601d\u7ef4\u65b9\u5f0f\u3002 A recursive function is a function that calls itself until a \u201cbase condition\u201d is true, and execution stops. \u9012\u5f52\u4f53\u73b0\u4e86\u4ee3\u7801\u7684\u5229\u7528\u3002 A function calling itself.","title":"recursion"},{"location":"recursion/#_1","text":"","title":"\u6ce8\u610f"},{"location":"recursion/#_2","text":"","title":"\u5206\u89e3\u4e0e\u7ec4\u5408\u8981\u6b63\u786e"},{"location":"recursion/#_3","text":"\u4e00\u5b9a\u8981\u627e\u5230\u6b63\u786e\u7684\u7ed3\u675f\u6761\u4ef6\u3002","title":"\u6b7b\u5faa\u73af"},{"location":"recursion/#stack-overflow","text":"\u9012\u5f52\u7684\u5b9e\u73b0\u79bb\u4e0d\u5f00\u5806\u6808\u3002","title":"stack overflow"},{"location":"recursion/#vs-iteration","text":"\u4ee5\u6811\u7684\u4e09\u79cd\u904d\u5386\u7531\u9012\u5f52\u8f6c\u6210\u8fed\u4ee3\u7684\u5b9e\u73b0\u3002","title":"vs iteration"},{"location":"recursion/#steps","text":"\u4ee5\u5e38\u89c1\u7684fib\u95ee\u9898\u4e3a\u4f8b\u3002 function fib(n) { }","title":"steps"},{"location":"recursion/#step-1","text":"int fib(int n) { } \u4e5f\u5c31\u662f\u4e09\u4e2a\u95ee\u9898\uff1a \u51fd\u6570\u540d \u51fd\u6570\u5165\u53c2 \u51fd\u6570\u8fd4\u56de\u503c","title":"step-1  \u7406\u89e3\u95ee\u9898\u5b9a\u4e49\u95ee\u9898\u51fd\u6570"},{"location":"recursion/#step-2","text":"\u91cd\u8981\u516c\u5f0f\uff1a fib(n) = fib(n-1) + fib(n -2) \u9898\u4e2d\u662f\u5c06fib(n)\u5206\u4e3a\u4e24\u4e2a\u4e24\u4e2a\u95ee\u9898\uff1afib(n-1)\uff0cfib(n -2) int fib(int n) { int prefib = fib(n-1); int preprefib = fib(n-2); }","title":"step-2 \u627e\u5230\u5b50\u95ee\u9898 \uff08\u5206\u89e3\u6210\u5b50\u95ee\u9898\uff09"},{"location":"recursion/#step-3","text":"int fib(int n) { int prefib = fib(n-1); int preprefib = fib(n-2); return preprefib+ prefib; } \u5c06\u4e24\u4e2a\u5b50\u95ee\u9898\u7ec4\u5408\u8d77\u6765\u3002","title":"step-3 \u5e94\u7528\u5b50\u95ee\u9898 \uff08\u7ec4\u5408\u5b50\u95ee\u9898\uff09"},{"location":"recursion/#step-4","text":"int fib(int n) { if(0 == n) return 1; if(1 == n) return 1; int prefib = fib(n-1); int preprefib = fib(n-2); return preprefib+ prefib; }","title":"step-4  \u9012\u5f52\u7ed3\u675f\u7684\u6761\u4ef6\u53ca\u6700\u57fa\u672c\u7684\u5b50\u95ee\u9898"},{"location":"recursion/#step-5","text":"\u8c03\u7528\u4e0e\u8fd4\u56de\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002 call(3) call(2) call(1) return (1) return (1+2) return(1+2+3)","title":"step-5  \u6574\u4e2a\u8fc7\u7a0b\u7684\u53ef\u89c6\u5316\uff0c\u52a0\u5f3a\u7406\u89e3"},{"location":"string/","text":"string \u5b57\u7b26\u4e32","title":"string \u5b57\u7b26\u4e32"},{"location":"string/#string","text":"","title":"string \u5b57\u7b26\u4e32"},{"location":"tree/","text":"build https://medium.com/swlh/leetcode-construct-binary-tree-from-inorder-and-postorder-traversal-db2d9926577c traversal https://levelup.gitconnected.com/binary-tree-traversal-depth-first-in-order-algorithm-visually-explained-352a744f15a8 https://levelup.gitconnected.com/breadth-first-search-bfs-algorithm-visually-explained-8dec1f514a6e https://towardsdatascience.com/4-types-of-tree-traversal-algorithms-d56328450846 Greedy Algorithms https://levelup.gitconnected.com/greedy-algorithms-2999d1367828 Kruskal\u2019s algorithm, Prim\u2019s algorithm, and Dijkstra\u2019s algorithm. \u5728\u8fd9\u4e09\u4e2a\u7b97\u6cd5\u5f97\u5230\u4f53\u73b0\u3002 shortest path Bellman-Ford Algorithm https://medium.com/dev-genius/bellman-ford-algorithm-visually-explained-e940b6edb00a input\uff1a \u8282\u70b9 \u4e0e\u6743\u91cd process\uff1a step 0 \uff1a \u8d77\u70b9 \u6743\u91cd\u8868\uff08\u8d77\u70b9\u4e3a0 \u5176\u4ed6\u4e3a\u65e0\u7a77\u5927\uff09 step 1 \uff1a \u6839\u636einput\uff0c\u66f4\u65b0\u6743\u91cd \u66f4\u65b0\u6bcf\u4e2a\u8282\u70b9\u4e0a\u4e00\u8df3\u8282\u70b9 \u627e\u5230\u7b2c\u4e00\u4e2a\u8d77\u70b9 \u6839\u636e\u5f53\u524d\u8fde\u63a5\u7684\u8282\u70b9\uff0c\u627e\u5230\u4e0b\u4e00\u4e2a\u53ef\u4ee5\u8fde\u63a5\u7684\u8282\u70b9 \u8d77\u70b9\u4e0b\u4e00\u4e2a\u53ef\u4ee5\u8fde\u63a5\u70b9 \u4e0b\u4e00\u4e2a\u8fde\u63a5\u70b9\u7684\u4e0b\u4e00\u4e2a\u53ef\u8fde\u63a5\u70b9 \u6700\u5c0f\u503c\u6bd4\u8f83 \u6bd4\u8f83\u6700\u5c0f\u503c \u5982\u679c\u6bd4\u5f53\u524d\u503c\u5c0f\u5c31\u66ff\u6362","title":"build"},{"location":"tree/#build","text":"https://medium.com/swlh/leetcode-construct-binary-tree-from-inorder-and-postorder-traversal-db2d9926577c","title":"build"},{"location":"tree/#traversal","text":"https://levelup.gitconnected.com/binary-tree-traversal-depth-first-in-order-algorithm-visually-explained-352a744f15a8 https://levelup.gitconnected.com/breadth-first-search-bfs-algorithm-visually-explained-8dec1f514a6e https://towardsdatascience.com/4-types-of-tree-traversal-algorithms-d56328450846","title":"traversal"},{"location":"tree/#greedy-algorithms","text":"https://levelup.gitconnected.com/greedy-algorithms-2999d1367828 Kruskal\u2019s algorithm, Prim\u2019s algorithm, and Dijkstra\u2019s algorithm. \u5728\u8fd9\u4e09\u4e2a\u7b97\u6cd5\u5f97\u5230\u4f53\u73b0\u3002","title":"Greedy Algorithms"},{"location":"tree/#shortest-path","text":"","title":"shortest path"},{"location":"tree/#bellman-ford-algorithm","text":"https://medium.com/dev-genius/bellman-ford-algorithm-visually-explained-e940b6edb00a input\uff1a \u8282\u70b9 \u4e0e\u6743\u91cd process\uff1a step 0 \uff1a \u8d77\u70b9 \u6743\u91cd\u8868\uff08\u8d77\u70b9\u4e3a0 \u5176\u4ed6\u4e3a\u65e0\u7a77\u5927\uff09 step 1 \uff1a \u6839\u636einput\uff0c\u66f4\u65b0\u6743\u91cd \u66f4\u65b0\u6bcf\u4e2a\u8282\u70b9\u4e0a\u4e00\u8df3\u8282\u70b9 \u627e\u5230\u7b2c\u4e00\u4e2a\u8d77\u70b9 \u6839\u636e\u5f53\u524d\u8fde\u63a5\u7684\u8282\u70b9\uff0c\u627e\u5230\u4e0b\u4e00\u4e2a\u53ef\u4ee5\u8fde\u63a5\u7684\u8282\u70b9 \u8d77\u70b9\u4e0b\u4e00\u4e2a\u53ef\u4ee5\u8fde\u63a5\u70b9 \u4e0b\u4e00\u4e2a\u8fde\u63a5\u70b9\u7684\u4e0b\u4e00\u4e2a\u53ef\u8fde\u63a5\u70b9 \u6700\u5c0f\u503c\u6bd4\u8f83 \u6bd4\u8f83\u6700\u5c0f\u503c \u5982\u679c\u6bd4\u5f53\u524d\u503c\u5c0f\u5c31\u66ff\u6362","title":"Bellman-Ford Algorithm"}]}